name: build

on:
  push:
    tags:
      - 'v*'

env:
  CARGO_TERM_COLOR: always
  BIN_NAME: falling

jobs:
  build:
    name: Build on ${{ matrix.os }} (${{ matrix.target }})
    runs-on: ${{ matrix.runs-on }}
    strategy:
      fail-fast: false
      matrix:
        include:
          # Linux
          - os: ubuntu-latest
            runs-on: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            out: falling-x86_64-linux
          - os: ubuntu-latest
            runs-on: ubuntu-24.04-arm
            target: aarch64-unknown-linux-gnu
            out: falling-aarch64-linux

          # macOS
          - os: macos-latest
            runs-on: macos-latest
            target: x86_64-apple-darwin
            out: falling-x86_64-macos
          - os: macos-latest
            runs-on: macos-latest
            target: aarch64-apple-darwin
            out: falling-aarch64-macos

          # Windows
          - os: windows-latest
            runs-on: windows-latest
            target: x86_64-pc-windows-msvc
            out: falling-x86_64-windows.exe
          - os: windows-latest
            runs-on: windows-latest
            target: aarch64-pc-windows-msvc
            out: falling-aarch64-windows.exe

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install dependencies
        if: runner.os == 'Linux'
        run: |
          sudo apt-get update
          sudo apt-get install -y pkg-config libasound2-dev libudev-dev alsa-utils

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}

      - name: Build
        run: cargo build --release --target ${{ matrix.target }}

      - name: Rename binary
        shell: bash
        run: |
          mkdir -p dist
          src="target/${{ matrix.target }}/release/${{ env.BIN_NAME }}"
          if [[ "${{ matrix.os }}" == "windows-latest" ]]; then
            mv "${src}.exe" "dist/${{ matrix.out }}"
          else
            mv "${src}" "dist/${{ matrix.out }}"
          fi

      - name: Upload binary as artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.out }}
          path: dist/${{ matrix.out }}

  release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    needs: [build]
    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: ./dist

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          files: dist/**
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
